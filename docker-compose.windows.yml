# Windows-friendly Docker Compose with Volume Sync
# For team members on Windows who want full containerization
# 
# Usage:
#   docker-compose -f docker-compose.yml -f docker-compose.windows.yml up
#
# This approach:
# ✅ Runs everything in containers (no local Node.js needed)
# ✅ Syncs node_modules so VS Code IntelliSense works
# ✅ Works great on Windows (no path/permission issues)
# ✅ Hot reload for development

services:
  backend:
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://flora_user:flora_password@postgres:5432/flora_db
    command: ['sh', '-c', 'pnpm install && pnpm dev']
    volumes:
      # Mount source code for editing
      - ./apps/backend:/app/apps/backend
      # Named volume for node_modules (syncs to host for VS Code)
      - backend_node_modules:/app/apps/backend/node_modules
      # Mount root package files for workspace functionality
      - ./package.json:/app/package.json
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml
    working_dir: /app/apps/backend
    # Enable VS Code debugging
    stdin_open: true
    tty: true

  frontend:
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3001/api
    command: ['sh', '-c', 'pnpm install && pnpm dev --host 0.0.0.0']
    volumes:
      # Mount source code for editing
      - ./apps/frontend:/app/apps/frontend
      # Named volume for node_modules (syncs to host for VS Code)
      - frontend_node_modules:/app/apps/frontend/node_modules
      # Mount root package files for workspace functionality
      - ./package.json:/app/package.json
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml
    working_dir: /app/apps/frontend
    # Enable VS Code debugging
    stdin_open: true
    tty: true

  postgres:
    # Keep development database optimizations
    command: postgres -c log_statement=all -c log_destination=stderr

# Named volumes for node_modules sync
# These will be created and managed by Docker
# VS Code can access them for IntelliSense support
volumes:
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local
