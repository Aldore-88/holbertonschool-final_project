// ============================================
// ï¿½ FLORA MARKETPLACE - PRISMA SCHEMA
// ============================================
// Flora marketplace schema with customer focus:
// - Guest checkout for one-time purchases
// - User accounts for subscriptions
// - Flexible subscription system (recurring + spontaneous)
// - Hardcoded provider system (no vendor management)

// ============================================
// GENERATOR & DATASOURCE
// ============================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ðŸ›’ PURCHASE & SUBSCRIPTION ENUMS
// ============================================
enum PurchaseType {
  ONE_TIME      // Guest or user one-time purchase
  SUBSCRIPTION  // Recurring subscription (requires login)
}

enum SubscriptionType {
  RECURRING_WEEKLY      // Weekly recurring delivery
  RECURRING_BIWEEKLY    // Every two weeks
  RECURRING_MONTHLY     // Monthly recurring delivery
  RECURRING_QUARTERLY   // Every 3 months
  RECURRING_YEARLY      // Yearly recurring delivery
  SPONTANEOUS           // Flexible timing, user decides when
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}


// ============================================
// ï¿½ PRODUCT FILTER ENUMS
// ============================================
enum Occasion {
  BIRTHDAY
  ANNIVERSARY
  WEDDING
  GRADUATION
  VALENTINES_DAY
  MOTHERS_DAY
  FATHERS_DAY
  CHRISTMAS
  EASTER
  SYMPATHY
  CONGRATULATIONS
  GET_WELL_SOON
  JUST_BECAUSE
  HOUSEWARMING
  THANK_YOU
}

enum Season {
  SPRING
  SUMMER
  FALL
  WINTER
  ALL_SEASON
}

enum Mood {
  ROMANTIC
  CHEERFUL
  ELEGANT
  PEACEFUL
  VIBRANT
  SOPHISTICATED
  WHIMSICAL
  CLASSIC
  MODERN
  RUSTIC
}

enum Color {
  RED
  PINK
  WHITE
  YELLOW
  ORANGE
  PURPLE
  BLUE
  GREEN
  MIXED
  PASTEL
  BURGUNDY
  LAVENDER
}

enum ProductType {
  BOUQUET
  ARRANGEMENT
  PLANT
  SUCCULENT
  ORCHID
  ROSE
  LILY
  TULIP
  SUNFLOWER
  MIXED_FLOWERS
  DRIED_FLOWERS
  ARTIFICIAL
}

enum PriceRange {
  UNDER_25      // Under $25
  RANGE_25_50   // $25-$50
  RANGE_50_75   // $50-$75
  RANGE_75_100  // $75-$100
  OVER_100      // Over $100
}

enum DeliveryType {
  STANDARD      // 3-5 business days
  EXPRESS       // 1-2 business days
  SAME_DAY      // Same day delivery
  PICKUP        // Customer pickup
}

enum UserRole {
  CUSTOMER
  ADMIN
}

// ============================================
// ï¿½ PRODUCT CATALOG
// ============================================
model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  priceCents  Int         // Price in cents (e.g., 2599 = $25.99)
  priceRange  PriceRange
  imageUrl    String?
  inStock     Boolean     @default(true)
  stockCount  Int         @default(0)
  isActive    Boolean     @default(true)
  cartItems   CartItem[]

  // Filter attributes for browsing
  occasions   Occasion[]
  seasons     Season[]
  moods       Mood[]
  colors      Color[]
  type        ProductType

  // Relationships
  categoryId  String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  subscriptionItems SubscriptionItem[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("products")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)

  products    Product[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

// ============================================
// ðŸ‘¤ USER MANAGEMENT (Customers Only)
// ============================================
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  firstName   String?
  lastName    String?
  phone       String?
  role        UserRole  @default(CUSTOMER)
  carts       Cart[]

  // User preferences for recommendations
  favoriteOccasions Occasion[]
  favoriteColors    Color[]
  favoriteMoods     Mood[]

  // Relationships
  addresses     Address[]
  orders        Order[]
  subscriptions Subscription[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  label       String? // "Home", "Work", "Gift Address"
  firstName   String
  lastName    String
  company     String?
  street1     String
  street2     String?
  city        String
  state       String
  zipCode     String
  country     String  @default("US")
  phone       String?
  isDefault   Boolean @default(false)

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[] @relation("ShippingAddress")
  subscriptions Subscription[] @relation("SubscriptionAddress")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}

// ============================================
// ðŸ›’ ORDER SYSTEM (One-time & Subscription Orders)
// ============================================
model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique

  // Purchase type and user info
  purchaseType    PurchaseType
  userId          String?       // NULL for guest purchases
  guestEmail      String?       // Email for guest purchases
  guestPhone      String?       // Phone for guest purchases

  // Subscription reference (if subscription order)
  subscriptionId  String?
  subscriptionType SubscriptionType?

  status          OrderStatus   @default(PENDING)

  // Pricing (all in cents)
  subtotalCents   Int
  shippingCents   Int
  taxCents        Int
  discountCents   Int           @default(0)
  totalCents      Int

  // Delivery details
  deliveryType    DeliveryType
  requestedDeliveryDate DateTime?
  actualDeliveryDate    DateTime?
  deliveryNotes   String?

  // Shipping address (snapshot for guest orders)
  shippingAddressId String?
  shippingFirstName String
  shippingLastName  String
  shippingStreet1   String
  shippingStreet2   String?
  shippingCity      String
  shippingState     String
  shippingZipCode   String
  shippingPhone     String?

  // Relationships
  user            User?         @relation(fields: [userId], references: [id])
  shippingAddress Address?      @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  items           OrderItem[]
  payments        Payment[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("orders")
}

model OrderItem {
  id            String  @id @default(cuid())
  orderId       String
  productId     String
  quantity      Int
  priceCents    Int     // Price at time of order

  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// ============================================
// ðŸ”„ SUBSCRIPTION SYSTEM
// ============================================
model Subscription {
  id              String            @id @default(cuid())
  userId          String
  type            SubscriptionType
  status          SubscriptionStatus @default(ACTIVE)

  // Subscription details
  frequency       Int?              // For recurring: weeks/months between deliveries
  nextDeliveryDate DateTime?        // When next delivery is scheduled
  lastDeliveryDate DateTime?        // When last delivery was made

  // Default delivery preferences
  deliveryType    DeliveryType      @default(STANDARD)
  addressId       String
  deliveryNotes   String?

  // Subscription items (what they want to receive)
  items           SubscriptionItem[]

  // Generated orders from this subscription
  orders          Order[]

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  address         Address           @relation("SubscriptionAddress", fields: [addressId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("subscriptions")
}

model SubscriptionItem {
  id              String        @id @default(cuid())
  subscriptionId  String
  productId       String
  quantity        Int           @default(1)

  subscription    Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [productId], references: [id])

  @@unique([subscriptionId, productId])
  @@map("subscription_items")
}

// ============================================
// ðŸ’³ PAYMENT SYSTEM
// ============================================
model Payment {
  id              String    @id @default(cuid())
  orderId         String
  amountCents     Int
  currency        String    @default("USD")

  // Payment provider details (Stripe)
  stripePaymentIntentId String?
  stripePaymentMethodId String?

  status          String    // succeeded, pending, failed, etc.
  paidAt          DateTime?

  order           Order     @relation(fields: [orderId], references: [id])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("payments")
}

// ============================================
// ðŸ“§ EMAIL & NOTIFICATIONS
// ============================================
model EmailTemplate {
  id          String    @id @default(cuid())
  name        String    @unique
  subject     String
  htmlContent String
  textContent String?
  isActive    Boolean   @default(true)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("email_templates")
}

model EmailLog {
  id          String    @id @default(cuid())
  toEmail     String
  subject     String
  templateName String?
  status      String    // sent, failed, pending
  orderId     String?
  userId      String?
  sentAt      DateTime?
  errorMessage String?

  createdAt   DateTime  @default(now())

  @@map("email_logs")
}

// ============================================
// ðŸšš DELIVERY MANAGEMENT
// ============================================
model DeliveryZone {
  id              String       @id @default(cuid())
  name            String       @unique
  description     String?
  zipCodes        String[]     // Array of supported zip codes
  cities          String[]     // Array of supported cities

  // Delivery options and pricing (all in cents)
  standardCostCents   Int      // Standard delivery cost
  expressCostCents    Int?     // Express delivery cost (if available)
  sameDayCostCents    Int?     // Same day delivery cost (if available)

  // Delivery timing
  standardDeliveryDays Int     @default(5)  // 3-5 business days
  expressDeliveryDays  Int     @default(2)  // 1-2 business days
  sameDayAvailable     Boolean @default(false)
  sameDayCutoffHour    Int?    // Hour of day (24h format) for same-day cutoff

  // Special pricing rules
  freeDeliveryThreshold Int?   // Free delivery if order over this amount
  weekendDelivery      Boolean @default(false)
  holidayDelivery      Boolean @default(false)

  // Delivery windows
  deliveryWindows     DeliveryWindow[]

  isActive        Boolean      @default(true)

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("delivery_zones")
}

model DeliveryWindow {
  id              String        @id @default(cuid())
  zoneId          String
  name            String        // "Morning", "Afternoon", "Evening"
  startTime       String        // "09:00"
  endTime         String        // "12:00"
  additionalCostCents Int       @default(0) // Extra cost for time window
  isAvailable     Boolean       @default(true)

  zone            DeliveryZone  @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@map("delivery_windows")
}

model DeliveryMethod {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String
  deliveryType    DeliveryType
  baseCostCents   Int       // Base cost in cents
  isActive        Boolean   @default(true)

  // Delivery characteristics
  estimatedDays   Int       // Estimated delivery days
  trackingAvailable Boolean @default(true)
  signatureRequired Boolean @default(false)
  insuranceIncluded Boolean @default(false)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("delivery_methods")
}

model DeliveryTracking {
  id              String    @id @default(cuid())
  orderId         String    @unique
  trackingNumber  String?   @unique
  carrierName     String?   // "Flora Express", "Local Courier"

  // Tracking status
  status          String    @default("PREPARING") // PREPARING, SHIPPED, IN_TRANSIT, OUT_FOR_DELIVERY, DELIVERED
  currentLocation String?
  estimatedDelivery DateTime?
  actualDelivery  DateTime?

  // Delivery details
  deliveredTo     String?   // Name of person who received
  deliveryNotes   String?   // Special delivery instructions
  deliveryPhoto   String?   // Photo proof of delivery

  // Tracking events
  events          TrackingEvent[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("delivery_tracking")
}

model TrackingEvent {
  id              String    @id @default(cuid())
  trackingId      String
  timestamp       DateTime
  location        String?
  status          String    // "ORDER_PLACED", "PREPARING", "SHIPPED", "IN_TRANSIT", "DELIVERED"
  description     String
  isCustomerVisible Boolean @default(true)

  tracking        DeliveryTracking @relation(fields: [trackingId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())

  @@map("tracking_events")
}

// ============================================
// ðŸ›’ CART SYSTEM
// ============================================
model Cart {
  id        String     @id @default(cuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

